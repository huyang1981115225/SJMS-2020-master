package jiegouxing.day07flyweight;

/**
 * 享元模式（FlyWeight）：
 * 
 * 一、场景：
 *         内存属于稀缺资源，不要随便浪费。如果有多个完全相同或相似的对象，我们可以通过享元模式，节省内存。
 *         
 * 二、核心：
 *         --享元模式以共享的方式高效地支持大量细粒度对象的重用。
 *         
 *         --享元对象能够做到共享的关键是区分了内部状态和外部状态。
 *         			内部状态：可以共享，不会随环境变化而变化
 *                  外部状态：不可以随便共享，会随环境变化而变化
 *                  
 * 四、案例： 围棋软件设计
 * 			  每个围棋棋子都是一个对象，有如下属性：
 *            1）颜色
 *            2）大小         这些都是可以共享的，称之为内部状态
 *            3）形状
 *            
 *            
 *            4）位置     这些是不可以共享的，称之为外部状态
 *         
 * 五、享元模式开发中应用的场景：
 *                            --享元模式由于其共享的特性，可以在任何“池”中操作，
 *                              比如：线程池、数据库连接池
 *                              
 *                            String类的实际也是享元模式
 *                            
 * 六、优点：
 *         --极大地减少内存中对象的数量
 *         --相同或相似对象内存中只存一份，极大地节约资源，提高系统性能
 *         --外部状态相对独立，不影响内部状态
 *         
 * 七、缺点：
 *         --模式较复杂，是程序逻辑复杂化
 *         --为了节省内存，共享了内部状态，分离出外部状态，而读取外部状态，使运行时间变长。用时间换取了空间。
 *
 * 
 * @author HY
 *
 */
public class Info {

}
