package jiegouxing.day05decorator;

/**
 * 装饰模式：
 *
 * 一、职责：
 *         --动态的为对象增加新的功能
 *         --一种用于替代继承的技术，无需通过继承增加子类就可以扩展对象的新功能。
 *
 *
 * 二、角色分析：
 *           --Component抽象构件角色：真实对象和装饰对象有相同的接口。
 *             这样客户端对象就能以与真实对象相同的方式同装饰对象交互。
 *
 *           --ConcreteComponent具体构件角色（真实对象）
 *             IO流中的FileInputStream...
 *
 *           --Decorator装饰角色：
 *             持有这样一个抽象构件的引用，装饰对象接收所有客户端的请求，
 *             并把这些请求发给真实对象。这样就能在真实的对象调用前后增加新的功能。
 *
 *           --ConcreteDecorator具体装饰角色：
 *             负责给构件对象增加新的功能。
 *
 * 三、优缺点：
 *    优点：
 *        1）扩展对象功能，比继承灵活，不会导致类个数急剧增加。
 *        2）可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更强大的对象
 *        3）具体构件对象和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰类。
 *
 *    缺点：
 *        1）产生很多小对象，大量小对象占用内存，一定程度上影响性能。
 *        2）装饰模式容易出错
 *
 * @author HuYang
 * @date 2019-11-01 15:02
 */
public class Info {
}
