package jiegouxing.day02proxy.staticproxy;

/**
 * 代理模式：☆☆☆☆☆非常重要
 *
 * 分类：
 *     --静态代理:由程序员创建代理类或特定工具自动生成源代码再对其进行编译，
 *       在程序运行之前，代理类的class文件就已经存在了。
 *
 *     --动态代理：在程序运行时运用反射机制动态创建。
 *
 * 角色分析：
 *        --抽象角色：定义代理角色和真实角色的公共对外方法
 *        --代理角色：
 *                 1）实现抽象角色，是真实对象的代理，通过真实角色的业务逻辑方法来实现抽象方法，
 *                    并且可以附加自己的操作。
 *                 2）将统一的控制流程放到代理角色中管理。
 *        --真实角色：
 *                 1）实现抽象角色，定义真实对象所要实现的业务逻辑，供代理对象调用
 *
 *                 2）关注真正的业务逻辑
 *
 * 静态代理：
 *        优点：代理客户端不需要知道实现类是什么，怎么做的，而客户端只需要知道代理类即可（解耦）
 *
 *        缺点：
 *            --代理类和委托类实现了相同的接口，实现了相同的方法，这样就出现了大量的代码重复。
 *            --代理对象只服务于一种类型的对象，如果需要服务多类型的对象，是必要为每一种对象代理。
 *
 * @author HuYang
 * @date 2019-11-01 11:32
 */
public class Info {
}
